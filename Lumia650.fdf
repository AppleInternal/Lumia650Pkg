[FD.MSM8909_EFI]
BaseAddress   = 0x80200000|gArmTokenSpaceGuid.PcdFdBaseAddress  #The base address of the FLASH Device.
Size          = 0x00100000|gArmTokenSpaceGuid.PcdFdSize         #The size in bytes of the FLASH Device
ErasePolarity = 1
BlockSize     = 0x200
NumBlocks     = 0x800

################################################################################
#
# Following are lists of FD Region layout which correspond to the locations of different
# images within the flash device.
#
# Regions must be defined in ascending order and may not overlap.
#
# A Layout Region start with a eight digit hex offset (leading "0x" required) followed by
# the pipe "|" character, followed by the size of the region, also in hex with the leading
# "0x" characters. Like:
# Offset|Size
# PcdOffsetCName|PcdSizeCName
# RegionType <FV, DATA, or FILE>
#
################################################################################

# from ArmVirtPkg/ArmVirtQemuKernel.fdf
#
# Implement the Linux kernel header layout so that the loader will identify
# it as something bootable, and execute it with a FDT pointer in x0 or r2.
#
0x00000000|0x00008000
DATA = {
  0x08, 0x10, 0x4f, 0xe2, # adr r1, .
  0x02, 0x00, 0xa0, 0xe1, # mov r0, r2 (DTB)
  0x00, 0x00, 0xa0, 0xe1, # nop
  0x00, 0x00, 0xa0, 0xe1, # nop
  0x00, 0x00, 0xa0, 0xe1, # nop
  0x00, 0x00, 0xa0, 0xe1, # nop
  0x00, 0x00, 0xa0, 0xe1, # nop
  0x00, 0x00, 0xa0, 0xe1, # nop

  0xf6, 0x1f, 0x00, 0xea, # b 0x8000
  0x18, 0x28, 0x6f, 0x01, # magic
  0x00, 0x00, 0x00, 0x00, # start
  0x00, 0x00, 0x20, 0x00, # image size: 2 MB
  0x01, 0x02, 0x03, 0x04  # endiannness flag
}

0x00008000|0x001f8000
gArmTokenSpaceGuid.PcdFvBaseAddress|gArmTokenSpaceGuid.PcdFvSize
FV = FVMAIN_COMPACTT

[FV.FvMain]
FvNameGuid         = f23b46dc-37b0-471e-b464-93dab4afee02
BlockSize          = 0x40
NumBlocks          = 0         # This FV gets compressed so make it just big enough
FvAlignment        = 8         # FV alignment and FV attributes setting.
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE

  APRIORI DXE {
    # first, install the PCD driver and call DxeInit
    INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf

    # next, install cpu protocol and enable the interrupt controller
    INF ArmPkg/Drivers/CpuDxe/CpuDxe.inf
    INF ArmPkg/Drivers/ArmGic/ArmGicDxe.inf
  }

  # Architecture services (PI Stage)
  INF MdeModulePkg/Core/Dxe/DxeMain.inf
  INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf
  INF ArmPkg/Drivers/ArmGic/ArmGicDxe.inf

  # Core Drivers
  INF ArmPkg/Drivers/CpuDxe/CpuDxe.inf
  INF ArmPkg/Drivers/TimerDxe/TimerDxe.inf
  INF MdeModulePkg/Universal/WatchdogTimerDxe/WatchdogTimer.inf
  INF EmbeddedPkg/MetronomeDxe/MetronomeDxe.inf
  INF EmbeddedPkg/ResetRuntimeDxe/ResetRuntimeDxe.inf
  INF EmbeddedPkg/RealTimeClockRuntimeDxe/RealTimeClockRuntimeDxe.inf

  # SoC Drivers (Cross-referenced from EFIDroid and Ben)
  INF Lumia650Pkg/Driver/BamDxe/BamDxe.inf
  INF Lumia650Pkg/GPLDriver/GpioTlmmDxe/GpioTlmmDxe.inf
  INF Lumia650Pkg/GPLDriver/GpioTlmmInterruptDxe/GpioTlmmInterruptDxe.inf
  INF Lumia650Pkg/Driver/SpmiDxe/SpmiDxe.inf
  INF Lumia650Pkg/Driver/Pm8x41Dxe/Pm8x41Dxe.inf
#  INF Lumia650Pkg/Driver/GenericKeypadDeviceDxe/GenericKeypadDeviceDxe.inf
#  INF Lumia650Pkg/Driver/KeypadDxe/KeypadDxe.inf
  INF Lumia650Pkg/Driver/ClockDxe/ClockDxe.inf
  INF Lumia650Pkg/Driver/SdhciMMCHSDxe/SdhciMMCHS.inf

  # Runtime Services
  INF MdeModulePkg/Core/RuntimeDxe/RuntimeDxe.inf
  INF MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe.inf
  INF MdeModulePkg/Universal/MonotonicCounterRuntimeDxe/MonotonicCounterRuntimeDxe.inf
  #INF MdeModulePkg/Universal/Variable/EmuRuntimeDxe/EmuVariableRuntimeDxe.inf
  INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableRuntimeDxe.inf

  # Security Stub
  INF MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe.inf

  # Graphics
  INF Lumia650Pkg/Driver/SimpleFbDxe/SimpleFbDxe.inf

  # BDS
  INF MdeModulePkg/Universal/PrintDxe/PrintDxe.inf
  INF MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe.inf
  INF MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe.inf
  INF MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe.inf
  INF MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe.inf
  INF MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe.inf
  INF MdeModulePkg/Universal/SmbiosDxe/SmbiosDxe.inf
  INF MdeModulePkg/Universal/DisplayEngineDxe/DisplayEngineDxe.inf
  INF MdeModulePkg/Universal/SetupBrowserDxe/SetupBrowserDxe.inf
  INF MdeModulePkg/Universal/DriverHealthManagerDxe/DriverHealthManagerDxe.inf
  INF MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
  INF MdeModulePkg/Application/UiApp/UiApp.inf
  INF Lumia650Pkg/Driver/LogoDxe/LogoDxe.inf

  # Disk IO
  INF MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe.inf
  INF MdeModulePkg/Universal/Disk/PartitionDxe/PartitionDxe.inf
  INF MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe.inf
  INF FatPkg/EnhancedFatDxe/Fat.inf
  INF MdeModulePkg/Bus/Scsi/ScsiBusDxe/ScsiBusDxe.inf
  INF MdeModulePkg/Bus/Scsi/ScsiDiskDxe/ScsiDiskDxe.inf

  # Networking
  INF NetworkPkg/DpcDxe/DpcDxe.inf
  INF NetworkPkg/ArpDxe/ArpDxe.inf
  INF NetworkPkg/Dhcp4Dxe/Dhcp4Dxe.inf
  INF NetworkPkg/Ip4Dxe/Ip4Dxe.inf
  INF NetworkPkg/MnpDxe/MnpDxe.inf
  INF NetworkPkg/VlanConfigDxe/VlanConfigDxe.inf
  INF NetworkPkg/Mtftp4Dxe/Mtftp4Dxe.inf
  INF NetworkPkg/TcpDxe/TcpDxe.inf
  INF NetworkPkg/Udp4Dxe/Udp4Dxe.inf

  #ACPI and SMBIOS
  INF Lumia650Pkg/Driver/SmBiosTableDxe/SmBiosTableDxe.inf

  #
  # ACPI Support
  #
  INF MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe.inf
  INF MdeModulePkg/Universal/Acpi/AcpiPlatformDxe/AcpiPlatformDxe.inf
  INF MdeModulePkg/Universal/Acpi/BootGraphicsResourceTableDxe/BootGraphicsResourceTableDxe.inf
#  FILE FREEFORM = 7E374E25-8E01-4FEE-87F2-390C23C606CD {
#  SECTION RAW = Lumia650Pkg/AcpiTables/BGRT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/CSRT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/DBG2.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/DSDT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/FACP.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/FACS.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/FADT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/GTDT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/MADT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/SSDT.aml
#  SECTION RAW = Lumia650Pkg/AcpiTables/TPM2.aml
#  SECTION UI = "AcpiTables"
#  } 

# Shell
INF ShellPkg/Application/Shell/Shell.inf

[FV.FVMAIN_COMPACT]
FvAlignment        = 8
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE

  INF Lumia650Pkg/PrePi/PrePi.inf

  #
  # PI DXE Drivers producing Architectural Protocols (EFI Services)
  #
  FILE FREEFORM = a4c429b1-046a-4e7d-afbc-c6988e8fe7cc {
    SECTION UI = "platform.json"
    SECTION RAW = Lumia650Pkg/Resources/Platform.json
  }

  FILE FV_IMAGE = 9E21FD93-9C72-4c15-8C4B-E77F1DB2D792 {
    SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
      SECTION FV_IMAGE = FVMAIN
    }
  }

!include Lumia650.fdf.inc
